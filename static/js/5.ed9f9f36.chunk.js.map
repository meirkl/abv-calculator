{"version":3,"sources":["constants/index.ts","utils/functions.ts","components/RangeSlider.tsx","hooks/useDebounce.tsx","components/Converter.tsx","pages/brix-converter.tsx"],"names":["HYDROMETER_MAX_VALUE","HYDROMETER_MIN_VALUE","BRIX_MIN_VALUE","BRIX_MAX_VALUE","SG_MIN_VALUE","SG_MAX_VALUE","formatValue","value","fractionDigits","Number","toFixed","calculateAbvStandard","og","fg","calculateAbvAlternate","brixToSG","brix","SGToBrix","sg","RangeSlider","memo","label","min","max","step","onChange","StyledRangeSlider","aria-label","type","styled","fieldset","secondary","primary","useDebounce","delay","React","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","Card","div","lighten","dark","RangeSliderWrapper","Title","h2","Converter","setBrix","setSg","debouncedBrix","debouncedSg","e","parseFloat","target","BrixConverter"],"mappings":"uHAAA,4MAAO,IAAMA,EAAuB,KACvBC,EAAuB,IACvBC,EAAiB,EACjBC,EAAiB,GACjBC,EAAe,EACfC,EAAe,O,gCCLrB,SAASC,EAAYC,GAA4C,IAA7BC,EAA4B,uDAAH,EAClE,OAAOC,OAAOF,EAAMG,QAAQF,IAIvB,SAASG,EAAqBC,EAAYC,GAC/C,OAAmB,QAAXD,EAAKC,GAGR,SAASC,EAAsBF,EAAYC,GAChD,OAAS,OAASD,EAAKC,IAAQ,MAAQD,IAAQC,EAAK,MAI/C,SAASE,EAASC,GACvB,OAAOA,GAAQ,MAASA,EAAO,MAAS,OAAS,EAG5C,SAASC,EAASC,GACvB,QAAS,SAAWA,EAAK,UAAYA,EAAK,WAAaA,EAAK,SAnB9D,2K,8xBCcA,IAAMC,EAA+BC,gBACnC,gBAAGC,EAAH,EAAGA,MAAOd,EAAV,EAAUA,MAAOe,EAAjB,EAAiBA,IAAKC,EAAtB,EAAsBA,IAAKC,EAA3B,EAA2BA,KAA3B,IAAiChB,sBAAjC,MAAkD,EAAlD,EAAqDiB,EAArD,EAAqDA,SAArD,OACE,kBAACC,EAAD,KACE,gCACE,8BAAOL,GACNd,EAAMG,QAAQF,IAEjB,2BACEmB,aAAYN,EACZO,KAAK,QACLN,IAAKA,EACLC,IAAKA,EACLC,KAAMA,EACNjB,MAAOA,EACPkB,SAAUA,QAMZC,EAAoBG,IAAOC,SAAV,IAOLC,IAaEC,IAMPD,KAWEZ,O,yFCrER,SAASc,EAAyB1B,EAAU2B,GAAe,MAEpBC,IAAMC,SAAS7B,GAFK,mBAEzD8B,EAFyD,KAEzCC,EAFyC,KAqBhE,OAjBAH,IAAMI,WACJ,WAEE,IAAMC,EAAUC,YAAW,WACzBH,EAAkB/B,KACjB2B,GAKH,OAAO,WACLQ,aAAaF,MAGjB,CAACjC,EAAO2B,IAGHG,E,+hBCTT,IA8CMM,EAAOd,IAAOe,IAAV,IAOYC,YAAQ,IAAMC,MAM9BC,EAAqBlB,IAAOe,IAAV,KAKlBI,EAAQnB,IAAOoB,GAAV,KAOIC,EAvEG,WAAO,IAAD,EACEf,IAAMC,SAASlC,KADjB,mBACfc,EADe,KACTmC,EADS,OAEFhB,IAAMC,SAAShC,KAFb,mBAEfc,EAFe,KAEXkC,EAFW,KAIhBC,EAAgBpB,EAAYjB,EAAM,KAClCsC,EAAcrB,EAAYf,EAAI,KAEpC,OACE,oCACE,kBAACyB,EAAD,KACE,gDACA,kBAACK,EAAD,KACE,oCADF,IACmB1C,YAAYS,YAASsC,KAExC,kBAACN,EAAD,KACE,kBAAC5B,EAAA,EAAD,CACEE,MAAM,OACNd,MAAOS,EACPM,IAAKpB,IACLqB,IAAKpB,IACLqB,KAAM,GACNhB,eAAgB,EAChBiB,SAAU,SAAA8B,GAAC,OAAIJ,EAAQK,WAAWD,EAAEE,OAAOlD,aAIjD,kBAACoC,EAAD,KACE,gDACA,kBAACK,EAAD,KACE,sCADF,IACqB1C,YAAYW,YAASqC,GAAc,IAExD,kBAACP,EAAD,KACE,kBAAC5B,EAAA,EAAD,CACEE,MAAM,KACNd,MAAOW,EACPI,IAAKlB,IACLmB,IAAKlB,IACLmB,KAAM,KACNC,SAAU,SAAA8B,GAAC,OAAIH,EAAM3C,OAAO8C,EAAEE,OAAOlD,e,QCvClCmD,UATO,WACpB,OACE,oCACE,kBAAC,IAAD,uBACA,kBAAC,EAAD","file":"static/js/5.ed9f9f36.chunk.js","sourcesContent":["export const HYDROMETER_MAX_VALUE = 1.16;\nexport const HYDROMETER_MIN_VALUE = 0.98;\nexport const BRIX_MIN_VALUE = 0;\nexport const BRIX_MAX_VALUE = 40;\nexport const SG_MIN_VALUE = 1;\nexport const SG_MAX_VALUE = 1.179;\n","export function formatValue(value: number, fractionDigits: number = 3) {\n  return Number(value.toFixed(fractionDigits));\n}\n\n// formula source: https://www.brewersfriend.com/2011/06/16/alcohol-by-volume-calculator-updated/\nexport function calculateAbvStandard(og: number, fg: number) {\n  return (og - fg) * 131.25;\n}\n\nexport function calculateAbvAlternate(og: number, fg: number) {\n  return ((76.08 * (og - fg)) / (1.775 - og)) * (fg / 0.794);\n}\n\n// formula source: https://straighttothepint.com/specific-gravity-brix-plato-conversion-calculators/\nexport function brixToSG(brix: number) {\n  return brix / (258.6 - (brix / 258.2) * 227.1) + 1;\n}\n\nexport function SGToBrix(sg: number) {\n  return ((182.4601 * sg - 775.6821) * sg + 1262.7794) * sg - 669.5622;\n}\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport { primary, secondary } from '../constants/colors';\n\ntype Props = {\n  label: string;\n  value: number;\n  min: number;\n  max: number;\n  step: number;\n  fractionDigits?: number;\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst RangeSlider: React.FC<Props> = memo(\n  ({ label, value, min, max, step, fractionDigits = 3, onChange }) => (\n    <StyledRangeSlider>\n      <output>\n        <span>{label}</span>\n        {value.toFixed(fractionDigits)}\n      </output>\n      <input\n        aria-label={label}\n        type=\"range\"\n        min={min}\n        max={max}\n        step={step}\n        value={value}\n        onChange={onChange}\n      />\n    </StyledRangeSlider>\n  ),\n);\n\nconst StyledRangeSlider = styled.fieldset`\n  padding: 12px 0px;\n  border: 0;\n  input {\n    width: 100%;\n    height: 5px;\n    border-radius: 5px;\n    background: ${secondary};\n    outline: none;\n    opacity: 0.7;\n    transition: opacity 0.2s;\n    appearance: none;\n    :hover {\n      opacity: 1;\n    }\n    ::-webkit-slider-thumb {\n      appearance: none;\n      width: 30px;\n      height: 30px;\n      border-radius: 50%;\n      background: ${primary};\n      cursor: pointer;\n    }\n  }\n  output {\n    display: block;\n    color: ${secondary};\n    font-size: 1.4rem;\n    text-align: center;\n    text-transform: uppercase;\n    span {\n      margin-right: 0.4rem;\n      font-size: 1rem;\n    }\n  }\n`;\n\nexport default RangeSlider;\n","import React from 'react';\n\nexport function useDebounce<T = unknown>(value: T, delay: number) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = React.useState(value);\n\n  React.useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay], // Only re-call effect if value or delay changes\n  );\n\n  return debouncedValue;\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport {\n  BRIX_MAX_VALUE,\n  BRIX_MIN_VALUE,\n  SG_MAX_VALUE,\n  SG_MIN_VALUE,\n} from '../constants';\nimport { useDebounce } from '../hooks/useDebounce';\nimport { brixToSG, formatValue, SGToBrix } from '../utils/functions';\nimport RangeSlider from './RangeSlider';\nimport { lighten } from 'polished';\nimport { dark } from '../constants/colors';\n\nconst Converter = () => {\n  const [brix, setBrix] = React.useState(BRIX_MIN_VALUE);\n  const [sg, setSg] = React.useState(SG_MIN_VALUE);\n\n  const debouncedBrix = useDebounce(brix, 250);\n  const debouncedSg = useDebounce(sg, 250);\n\n  return (\n    <>\n      <Card>\n        <span>Brix → SG</span>\n        <Title>\n          <span>SG</span> {formatValue(brixToSG(debouncedBrix))}\n        </Title>\n        <RangeSliderWrapper>\n          <RangeSlider\n            label=\"brix\"\n            value={brix}\n            min={BRIX_MIN_VALUE}\n            max={BRIX_MAX_VALUE}\n            step={0.1}\n            fractionDigits={2}\n            onChange={e => setBrix(parseFloat(e.target.value))}\n          />\n        </RangeSliderWrapper>\n      </Card>\n      <Card>\n        <span>SG → Brix</span>\n        <Title>\n          <span>Brix</span> {formatValue(SGToBrix(debouncedSg), 2)}\n        </Title>\n        <RangeSliderWrapper>\n          <RangeSlider\n            label=\"sg\"\n            value={sg}\n            min={SG_MIN_VALUE}\n            max={SG_MAX_VALUE}\n            step={0.001}\n            onChange={e => setSg(Number(e.target.value))}\n          />\n        </RangeSliderWrapper>\n      </Card>\n    </>\n  );\n};\n\nconst Card = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  width: 90%;\n\n  background-color: ${lighten(0.05, dark)};\n  margin-top: 30px;\n  padding: 20px;\n  border-radius: 3px;\n`;\n\nconst RangeSliderWrapper = styled.div`\n  width: 100%;\n  max-width: 350px;\n`;\n\nconst Title = styled.h2`\n  font-size: 2.2rem;\n  span {\n    font-size: 1.6rem;\n  }\n`;\n\nexport default Converter;\n","import React from 'react';\nimport Converter from '../components/Converter';\nimport { Title } from './Styles';\n\nconst BrixConverter = () => {\n  return (\n    <>\n      <Title>Brix Converter</Title>\n      <Converter />\n    </>\n  );\n};\n\nexport default BrixConverter;\n"],"sourceRoot":""}