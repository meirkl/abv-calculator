{"version":3,"sources":["constants/index.ts","utils/functions.ts","components/RangeSlider.tsx","context/AbvEquation.tsx","components/Gauge.tsx","components/Calculator.tsx","components/Settings.tsx","hooks/useOnClickOutside.tsx","pages/abv-calculator.tsx"],"names":["HYDROMETER_MAX_VALUE","HYDROMETER_MIN_VALUE","BRIX_MIN_VALUE","BRIX_MAX_VALUE","SG_MIN_VALUE","SG_MAX_VALUE","formatValue","value","fractionDigits","Number","toFixed","calculateAbvStandard","og","fg","calculateAbvAlternate","brixToSG","brix","SGToBrix","sg","RangeSlider","React","memo","label","min","max","step","onChange","StyledRangeSlider","aria-label","type","styled","fieldset","secondary","main","primary","AbvEquationContext","createContext","equation","changeHandler","calculateAbv","useAbvEquationContext","useContext","AbvEquationContextProvider","children","useState","setEquation","useEffect","abvEquationMode","localStorage","getItem","Provider","setItem","Gauge","abv","maxAbv","useMemo","id","style","height","margin","nrOfLevels","colors","danger","arcWidth","needleColor","needleBaseColor","percent","hideText","Card","div","dark","light","RangeSliderWrapper","Result","Calculator","setOg","setFg","setAbv","result","e","target","CheckBox","StyledSettingsCommon","css","SettingsDrawerButton","StyledSettings","props","showMenu","Settings","ref","callback","wrapperRef","useRef","setShowSettings","handleClickOutside","event","current","contains","document","addEventListener","removeEventListener","showSettings","onClick","checked","htmlFor","AbvCalculator","AbvEquation"],"mappings":"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","file":"static/js/5.29b39431.chunk.js","sourcesContent":["export const HYDROMETER_MAX_VALUE = 1.16;\nexport const HYDROMETER_MIN_VALUE = 0.98;\nexport const BRIX_MIN_VALUE = 0;\nexport const BRIX_MAX_VALUE = 40;\nexport const SG_MIN_VALUE = 1;\nexport const SG_MAX_VALUE = 1.179;\n","export function formatValue(value: number, fractionDigits: number = 3) {\n  return Number(value.toFixed(fractionDigits));\n}\n\n// formula source: https://www.brewersfriend.com/2011/06/16/alcohol-by-volume-calculator-updated/\nexport function calculateAbvStandard(og: number, fg: number) {\n  return (og - fg) * 131.25;\n}\n\nexport function calculateAbvAlternate(og: number, fg: number) {\n  return ((76.08 * (og - fg)) / (1.775 - og)) * (fg / 0.794);\n}\n\n// formula source: https://straighttothepint.com/specific-gravity-brix-plato-conversion-calculators/\nexport function brixToSG(brix: number) {\n  return brix / (258.6 - (brix / 258.2) * 227.1) + 1;\n}\n\nexport function SGToBrix(sg: number) {\n  return ((182.4601 * sg - 775.6821) * sg + 1262.7794) * sg - 669.5622;\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { primary, secondary } from '../constants/colors';\n\ntype Props = {\n  label: string;\n  value: number;\n  min: number;\n  max: number;\n  step: number;\n  fractionDigits?: number;\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst RangeSlider: React.FC<Props> = React.memo(\n  ({ label, value, min, max, step, fractionDigits = 3, onChange }) => (\n    <StyledRangeSlider>\n      <output>\n        <span>{label}</span>\n        {value.toFixed(fractionDigits)}\n      </output>\n      <input\n        aria-label={label}\n        type=\"range\"\n        min={min}\n        max={max}\n        step={step}\n        value={value}\n        onChange={onChange}\n      />\n    </StyledRangeSlider>\n  ),\n);\n\nconst StyledRangeSlider = styled.fieldset`\n  padding: 0.75rem 0;\n  border: 0;\n  input {\n    width: 100%;\n    height: 0.3rem;\n    border-radius: 5px;\n    background: ${secondary.main};\n    outline: none;\n    opacity: 0.7;\n    transition: opacity 0.2s;\n    appearance: none;\n    :hover {\n      opacity: 1;\n    }\n    ::-webkit-slider-thumb {\n      appearance: none;\n      width: 1.8rem;\n      height: 1.8rem;\n      border-radius: 50%;\n      background: ${primary};\n      cursor: pointer;\n    }\n  }\n  output {\n    display: block;\n    color: ${secondary.main};\n    font-size: 1.4rem;\n    text-align: center;\n    text-transform: uppercase;\n    span {\n      margin-right: 0.4rem;\n      font-size: 1rem;\n    }\n  }\n`;\n\nexport default RangeSlider;\n","import React from 'react';\nimport {\n  calculateAbvAlternate,\n  calculateAbvStandard,\n} from '../utils/functions';\n\ntype Props = { children: React.ReactNode };\n\ntype EquationMode = 'standard' | 'alternate';\n\ntype ContextProps = {\n  equation: EquationMode;\n  changeHandler: () => void;\n  calculateAbv: (og: number, fg: number) => number;\n};\n\nconst AbvEquationContext = React.createContext<ContextProps>({\n  equation: 'standard',\n  changeHandler: () => {},\n  calculateAbv: () => 0,\n});\n\nexport const useAbvEquationContext = (): ContextProps =>\n  React.useContext(AbvEquationContext);\n\nexport const AbvEquationContextProvider = ({ children }: Props) => {\n  const [equation, setEquation] = React.useState<EquationMode>('standard');\n\n  React.useEffect(() => {\n    const abvEquationMode = localStorage.getItem(\n      'EquationMode',\n    ) as EquationMode;\n\n    if (abvEquationMode) {\n      setEquation(abvEquationMode);\n    }\n  }, []);\n\n  const changeHandler = () => {\n    if (equation === 'standard') {\n      localStorage.setItem('EquationMode', 'alternate');\n      setEquation('alternate');\n    } else {\n      localStorage.setItem('EquationMode', 'standard');\n      setEquation('standard');\n    }\n  };\n\n  const calculateAbv = (og: number, fg: number) => {\n    if (equation === 'alternate') {\n      return calculateAbvAlternate(og, fg);\n    }\n    return calculateAbvStandard(og, fg);\n  };\n\n  return (\n    <AbvEquationContext.Provider\n      value={{ equation, changeHandler, calculateAbv }}\n    >\n      {children}\n    </AbvEquationContext.Provider>\n  );\n};\n\nexport default AbvEquationContextProvider;\n","import React from 'react';\nimport GaugeChart from 'react-gauge-chart';\nimport { HYDROMETER_MAX_VALUE, HYDROMETER_MIN_VALUE } from '../constants';\nimport { danger, primary, secondary } from '../constants/colors';\nimport { useAbvEquationContext } from '../context/AbvEquation';\n\ntype Props = { abv: number };\n\nconst Gauge: React.FC<Props> = React.memo(({ abv }) => {\n  const { calculateAbv } = useAbvEquationContext();\n\n  const maxAbv = React.useMemo(\n    () => calculateAbv(HYDROMETER_MAX_VALUE, HYDROMETER_MIN_VALUE),\n    [calculateAbv],\n  );\n\n  return (\n    <GaugeChart\n      id=\"abv-gauge\"\n      style={{ height: '6.2rem', margin: '1rem 0' }}\n      nrOfLevels={20}\n      colors={[secondary.main, danger]}\n      arcWidth={0.2}\n      needleColor={primary}\n      needleBaseColor={primary}\n      percent={abv / maxAbv}\n      hideText={true}\n    />\n  );\n});\n\nexport default Gauge;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { HYDROMETER_MIN_VALUE, HYDROMETER_MAX_VALUE } from '../constants';\nimport { useAbvEquationContext } from '../context/AbvEquation';\nimport { formatValue } from '../utils/functions';\nimport Gauge from './Gauge';\nimport RangeSlider from './RangeSlider';\nimport { dark } from '../constants/colors';\n\nconst Calculator: React.FC = () => {\n  const { calculateAbv } = useAbvEquationContext();\n  const [og, setOg] = React.useState(HYDROMETER_MIN_VALUE);\n  const [fg, setFg] = React.useState(HYDROMETER_MIN_VALUE);\n  const [abv, setAbv] = React.useState(0);\n\n  React.useEffect(() => {\n    const result = formatValue(calculateAbv(og, fg), 2);\n    setAbv(result > 0 ? result : 0);\n  }, [og, fg, calculateAbv]);\n\n  return (\n    <>\n      <Gauge abv={abv} />\n      <Result>\n        <span>ABV</span>\n        {abv}%\n      </Result>\n      <Card>\n        <RangeSliderWrapper>\n          <RangeSlider\n            label=\"og\"\n            value={og}\n            min={HYDROMETER_MIN_VALUE}\n            max={HYDROMETER_MAX_VALUE}\n            step={0.001}\n            onChange={e => setOg(formatValue(Number(e.target.value)))}\n          />\n          <RangeSlider\n            label=\"fg\"\n            value={fg}\n            min={HYDROMETER_MIN_VALUE}\n            max={HYDROMETER_MAX_VALUE}\n            step={0.001}\n            onChange={e => setFg(formatValue(Number(e.target.value)))}\n          />\n        </RangeSliderWrapper>\n      </Card>\n    </>\n  );\n};\n\nconst Card = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  flex: 0 0 auto;\n  text-align: center;\n  width: 90%;\n  background-color: ${dark.light};\n  margin: 1rem 0;\n  padding: 1.2rem;\n  border-radius: 3px;\n`;\n\nconst RangeSliderWrapper = styled.div`\n  width: 100%;\n  max-width: 22rem;\n`;\n\nconst Result = styled.div`\n  font-size: 3.75em;\n  margin: 1rem 0;\n  span {\n    margin-right: 0.7rem;\n    font-size: 2.5rem;\n  }\n`;\n\nexport default Calculator;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { light, secondary } from '../constants/colors';\nimport { useAbvEquationContext } from '../context/AbvEquation';\nimport { useOnClickOutside } from '../hooks/useOnClickOutside';\n\nconst Settings: React.FC = () => {\n  const wrapperRef = React.useRef(null);\n\n  const { equation, changeHandler } = useAbvEquationContext();\n  useOnClickOutside(wrapperRef, () => setShowSettings(false));\n\n  const [showSettings, setShowSettings] = React.useState(false);\n\n  return (\n    <div ref={wrapperRef}>\n      <SettingsDrawerButton onClick={() => setShowSettings(true)}>\n        Σ\n      </SettingsDrawerButton>\n      <StyledSettings showMenu={showSettings}>\n        <h5>Equation</h5>\n        <CheckBox>\n          <input\n            id=\"standard\"\n            type=\"checkbox\"\n            checked={equation === 'standard'}\n            onChange={changeHandler}\n          />\n          <span></span>\n          <label htmlFor=\"standard\">Standard</label>\n        </CheckBox>\n        <CheckBox>\n          <input\n            id=\"alternate\"\n            type=\"checkbox\"\n            checked={equation === 'alternate'}\n            onChange={changeHandler}\n          />\n          <span></span>\n          <label htmlFor=\"alternate\">Alternate</label>\n        </CheckBox>\n      </StyledSettings>\n    </div>\n  );\n};\n\nconst CheckBox = styled.div`\n  margin: 1.5rem 0;\n  display: flex;\n  align-items: center;\n  user-select: none;\n\n  label {\n    font-size: 1.2rem;\n    position: absolute;\n    padding-left: 1.8rem;\n    cursor: pointer;\n  }\n\n  input {\n    opacity: 0;\n    visibility: hidden;\n    position: absolute;\n\n    &:checked {\n      ~ span {\n        border-color: ${secondary.light};\n        box-shadow: 0px 0px 0px 5px ${secondary.light} inset;\n\n        &::after {\n          opacity: 1;\n          transform: scale(1);\n        }\n      }\n    }\n  }\n\n  span {\n    width: 1.25rem;\n    height: 1.25rem;\n    border-radius: 50%;\n    border: 2px solid ${secondary.light};\n    box-shadow: 0px 0px 0px 0px ${secondary.light} inset;\n    transition: all 0.15s cubic-bezier(0, 1.05, 0.72, 1.07);\n  }\n`;\n\nconst StyledSettingsCommon = css`\n  position: fixed;\n  top: 20%;\n  left: 0;\n  background-color: ${secondary.dark};\n  border: 1px solid ${secondary.main};\n  border-left: none;\n  border-radius: 0 3px 3px 0;\n`;\n\nconst SettingsDrawerButton = styled.div`\n  ${StyledSettingsCommon};\n  padding: 0.2rem 0.5rem;\n  display: flex;\n  align-items: center;\n  color: ${light};\n  font-size: 1.8rem;\n  font-family: 'Roboto', sans-serif;\n  cursor: pointer;\n`;\n\nconst StyledSettings = styled.div<{ showMenu: boolean }>`\n  ${StyledSettingsCommon};\n  transform: ${props =>\n    props.showMenu ? 'translateX(0)' : 'translateX(-100%)'};\n  transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);\n  padding: 0.9rem 1.5rem;\n  h5 {\n    font-size: 1.8rem;\n    text-align: center;\n  }\n`;\nexport default Settings;\n","import React from 'react';\n\n/**\n * Hook that executes a callback on click outside of the passed ref\n */\nexport function useOnClickOutside<T extends HTMLElement>(\n  ref: React.RefObject<T>,\n  callback: () => void,\n) {\n  React.useEffect(() => {\n    /**\n     * Execute callback\n     */\n    function handleClickOutside(event: MouseEvent) {\n      if (ref.current && !ref.current.contains(event.target as Node)) {\n        callback();\n      }\n    }\n\n    // Bind the event listener\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [ref, callback]);\n}\n","import React from 'react';\nimport Calculator from '../components/Calculator';\nimport Settings from '../components/Settings';\nimport AbvEquationContextProvider from '../context/AbvEquation';\nimport { Title } from './Styles';\n\nconst AbvCalculator: React.FC = () => (\n  <>\n    <Title>ABV Calculator</Title>\n    <AbvEquationContextProvider>\n      <Calculator />\n      <Settings />\n    </AbvEquationContextProvider>\n  </>\n);\n\nexport default AbvCalculator;\n"],"sourceRoot":""}