{"version":3,"sources":["pages/Styles.ts","fonts/Lobster-Regular.woff2","fonts/Roboto-Regular.woff2","pages/index.tsx","components/Tabs.tsx","components/App.tsx","serviceWorker.ts","utils/globalStyle.ts","fonts/fonts.ts","index.tsx","constants/colors.ts"],"names":["StyledMain","styled","main","Title","h1","module","exports","AbvCalculator","React","lazy","BrixConverter","AbvCalculatorPage","Suspense","fallback","BrixConverterPage","StyledTabs","nav","darken","dark","Tab","li","props","active","StyledNavLink","NavLink","light","Tabs","pathname","useLocation","endsWith","to","exact","activeClassName","Wrapper","div","App","basename","path","component","render","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","createGlobalStyle","primary","Lobster","Roboto","ReactDOM","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","secondary","secondaryDark","secondaryLight","danger"],"mappings":"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","file":"static/js/main.b33ddf9d.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const StyledMain = styled.main`\n  height: 100vh;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  position: relative;\n  flex: 1 1 0%;\n`;\n\nexport const Title = styled.h1`\n  font-size: 2.5rem;\n  margin: 20px 0;\n`;\n","module.exports = __webpack_public_path__ + \"static/media/Lobster-Regular.399b65d7.woff2\";","module.exports = __webpack_public_path__ + \"static/media/Roboto-Regular.8169e1a1.woff2\";","import React from 'react';\nimport { StyledMain } from './Styles';\n\nconst AbvCalculator = React.lazy(() => import('./abv-calculator'));\nconst BrixConverter = React.lazy(() => import('./brix-converter'));\n\nexport const AbvCalculatorPage: React.FC = () => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <StyledMain>\n        <AbvCalculator />\n      </StyledMain>\n    </React.Suspense>\n  );\n};\n\nexport const BrixConverterPage: React.FC = () => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <StyledMain>\n        <BrixConverter />\n      </StyledMain>\n    </React.Suspense>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport { dark, light } from '../constants/colors';\nimport { darken } from 'polished';\n\nconst Tabs: React.FC = () => {\n  const { pathname } = useLocation();\n\n  return (\n    <StyledTabs>\n      <ul>\n        <Tab active={pathname.endsWith('/')}>\n          <StyledNavLink to=\"/\" exact activeClassName=\"active\">\n            <div>%</div>\n            <div>ABV Calculator</div>\n          </StyledNavLink>\n        </Tab>\n        <Tab active={pathname.endsWith('/converter')}>\n          <StyledNavLink to=\"/converter\" activeClassName=\"active\">\n            <div>â‡„</div>\n            <div>Brix Converter</div>\n          </StyledNavLink>\n        </Tab>\n      </ul>\n    </StyledTabs>\n  );\n};\n\nconst StyledTabs = styled.nav`\n  background-color: ${darken(0.01, dark)};\n  ul {\n    list-style: none;\n  }\n`;\n\nconst Tab = styled.li<{ active: boolean }>`\n  display: inline-block;\n  width: 50%;\n\n  :after {\n    display: block;\n    content: '';\n    border-bottom: solid 3px;\n    transform: ${props => (props.active ? 'scaleX(1)' : 'scaleX(0)')};\n    transform-origin: ${props => props.active && '0% 50%'};\n    transition: ${props =>\n      props.active ? 'transform 300ms ease-in' : 'transform 0ms ease-out'};\n  }\n`;\n\nconst StyledNavLink = styled(NavLink)`\n  color: inherit;\n  text-decoration: none;\n  text-align: center;\n  font-size: 0.8rem;\n\n  display: block;\n  padding-bottom: 5px;\n\n  :not(.active) {\n    color: ${light};\n  }\n\n  div:first-of-type {\n    font-size: 1.8rem;\n  }\n`;\n\nexport default Tabs;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { AbvCalculatorPage, BrixConverterPage } from '../pages';\nimport Tabs from './Tabs';\n\nconst App: React.FC = () => {\n  return (\n    <Wrapper>\n      <BrowserRouter basename=\"/abv-calculator\">\n        <Switch>\n          <Route path=\"/\" exact component={AbvCalculatorPage} />\n          <Route path=\"/converter\" component={BrixConverterPage} />\n          <Route render={() => <Redirect to=\"/\" />} />\n        </Switch>\n        <Tabs />\n      </BrowserRouter>\n    </Wrapper>\n  );\n};\n\nexport const Wrapper = styled.div`\n  display: flex;\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  right: 0px;\n  bottom: 0px;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from 'styled-components';\nimport { dark, primary } from '../constants/colors';\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n  body {\n    font-family: 'Lobster', cursive;\n    background: ${dark};\n    color: ${primary};\n    font-size: 16px;\n  }\n`;\n","import { createGlobalStyle } from 'styled-components';\nimport Lobster from '../fonts/Lobster-Regular.woff2';\nimport Roboto from '../fonts/Roboto-Regular.woff2';\n\nexport default createGlobalStyle`\n  @font-face {\n    font-family: 'Lobster';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Lobster Regular'), local('Lobster-Regular'), url(${Lobster}) format('woff2');\n  }\n  @font-face {\n    font-family: 'Roboto';\n    font-style: normal;\n    font-weight: 400;\n    font-display: swap;\n    src: local('Roboto'), local('Roboto-Regular'), url(${Roboto}) format('woff2');\n  }\n`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport GlobalStyle from './utils/globalStyle';\nimport GlobalFonts from './fonts/fonts';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <GlobalFonts />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","export const primary = '#f1c40f';\nexport const secondary = '#22a6b3';\nexport const secondaryDark = '#0c3c41';\nexport const secondaryLight = '#69d8e3';\nexport const danger = '#c0392b';\nexport const dark = '#1e2127';\nexport const light = '#ecf0f1';\n"],"sourceRoot":""}